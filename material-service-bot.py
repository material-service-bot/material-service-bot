import pandas as pd
from sentence_transformers import SentenceTransformer
import faiss
import numpy as np
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = pd.read_csv("products.csv")
texts = df["name"].astype(str).tolist()
model = SentenceTransformer("paraphrase-multilingual-MiniLM-L12-v2")
embeddings = model.encode(texts, show_progress_bar=True)
index = faiss.IndexFlatL2(embeddings[0].shape[0])
index.add(np.array(embeddings).astype("float32"))

import os
TOKEN = os.environ.get("TOKEN")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text
    query_vec = model.encode([query])
    D, I = index.search(np.array(query_vec).astype("float32"), k=5)

    results = []
    for idx in I[0]:
        name = df.iloc[idx]["name"]
        price = df.iloc[idx]["price"]
        supplier = df.iloc[idx]["supplier"]
        results.append(f"üì¶ {name}\nüí∞ {price} ‚ÇΩ\nüè¨ {supplier}")

    reply = "\n\n".join(results)
    await update.message.reply_text(reply if results else "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def run_bot():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–¥—ë—Ç –∑–∞–ø—Ä–æ—Å–æ–≤...")
    app.run_polling()

if __name__ == "__main__":
    run_bot()